public class Solution {
    public int largestRectangleArea(int[] height) {
        // Start typing your Java solution below
        // DO NOT write main() function
        Stack<Integer> stack = new Stack<Integer>();
        int i =0, max = 0;
        while(i < height.length){ 
            if(stack.isEmpty() || height[stack.peek()]<=height[i])
                stack.push(i++);
            else
                max = Math.max(max, height[stack.pop()]* (stack.isEmpty()? i : i-stack.peek()-1));   
        }
        while(!stack.isEmpty())
            max = Math.max(max, height[stack.pop()]* (stack.isEmpty()? i : i-stack.peek()-1));
        return max;
    }
}






public class Solution {
    public int largestRectangleArea(int[] height) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(height.length==0) return 0;
        int max=0;
        int len=height.length-1;
        max=help(height,0,len,max);
        return max;
    }
    
    public int help(int[] height,int left,int right,int max){
        if(left>right) return max;
        int min=findMin(height,left,right);
        int tmp=height[min]*(right-left+1);
        max=Math.max(max,tmp);
        if(min>0)   max=Math.max(help(height,left,min-1,max),max);
        if(min<height.length-1) max=Math.max(help(height,min+1,right,max),max);
        return max;
    }
    
    public int findMin(int[] height,int left,int right){
        int min=left;
        for(int i=left+1;i<=right;i++){
            if(height[i]<height[min])
                min=i;
        }
        return min;
    }
}