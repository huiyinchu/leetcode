public class Solution {
    public ArrayList<ArrayList<String>> partition(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<String>> ans=new ArrayList<ArrayList<String>>();
        if(s.length()==0) return ans;
        ArrayList<String> list=new ArrayList<String>();
        dfs(ans,list,0,s);
        return ans;
    }
    
    public void dfs(ArrayList<ArrayList<String>> ans,ArrayList<String> list,int start,String s){
        if(start==s.length()){
            ArrayList<String> temp=new ArrayList<String>(list);
            ans.add(temp);
            return;
        }
        for(int i=start;i<s.length();i++){
            if(isPalindrome(s,start,i)){
                list.add(s.substring(start,i+1));
                dfs(ans,list,i+1,s);
                list.remove(list.size()-1);
            }  
        }
    }
    
    public boolean isPalindrome(String s, int start,int end){
        while(start<end){
            if(s.charAt(start)!=s.charAt(end)) return false;
            start++;
            end--;
        }
        return true;
    }
}