// reverse the linked list between pre.next and end, inclusively  
// e.g. 0 -> 1 -> 2 -> 3 -> 4 -> 5, pre = 0, end = 5  
//  => 0 -> 5 -> 4 -> 3 -> 2 -> 1  
private ListNode reverse(ListNode pre, ListNode end) {  
  if (pre == null || end == null) return end;  
  ListNode cur = pre.next;  
  while (pre.next != end) {  
    ListNode nt = cur.next.next;  
    cur.next.next = pre.next;  
    pre.next = cur.next;  
    cur.next = nt;  
  }  
  return cur;  
}  
  
public ListNode reverseKGroup(ListNode head, int k) {  
  ListNode dummy = new ListNode(0);  
  dummy.next = head;  
  
  ListNode pre = dummy, cur = head;  
  int pos = 1;  
  while (cur != null) {  
    if (pos == k) {  
      pos = 0;  
      pre = reverse(pre, cur);  
      cur = pre.next;  
    } else {  
      cur = cur.next;  
    }  
    ++pos;  
  }  
  
  return dummy.next;  
}