public class Solution {
   public ArrayList<Integer> findSubstring(String S, String[] L) {  
   ArrayList<Integer> indices = new ArrayList<Integer>();  
   if (L.length == 0) return indices;  
   
   int total = L.length, wordLen = L[0].length();  
   
   // store the words and frequencies in a hash table  
   HashMap<String, Integer> words = new HashMap<String, Integer>();  
   for (String s : L) {  
     if (words.containsKey(s)) {  
       words.put(s, words.get(s)+1);  
     } else {  
       words.put(s, 1);  
     }  
   }  
   
   // find concatenations  
   for (int i=0; i <= S.length() - total*wordLen; ++i) {  
     // check if it is a concatenation   
     HashMap<String, Integer> target = new HashMap<String, Integer>(words);  
     for (int j = i; j <= S.length() - wordLen && !target.isEmpty(); j+=wordLen) {  
       String sub = S.substring(j, j+wordLen);  
       if (!target.containsKey(sub)) break;  
       if (target.get(sub) > 1) {  // reduce the frequency
         target.put(sub, target.get(sub)-1);  
       } else {  // remove the word if only one left
         target.remove(sub);  
       }
     }  
     if (target.isEmpty()) {  
       indices.add(i);  
     }  
   }  
   
   return indices;  
 }  
}