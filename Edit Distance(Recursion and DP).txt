DP:
public class Solution {
    public int minDistance(String word1, String word2) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(word1.equals(word2)) return 0;
        int l1 = word1.length();
        int l2 = word2.length();
        if(l1 == 0) return l2;
        if(l2 == 0) return l1;
        int mat[][] =new int[l1+1][l2+1];
        for(int i = 1; i <= l1; i++)
            mat[i][0] = i;
        for(int i = 1; i<= l2; i++)
            mat[0][i] = i;
        mat[0][0] = 0;
        for(int i =1; i<=l1; i++){
            for(int j = 1; j <= l2; j++)
                mat[i][j] = min( mat[i][j-1]+1, mat[i-1][j]+1, mat[i-1][j-1] + ((word1.charAt(i-1) == word2.charAt(j-1))? 0:1));
        }
        return mat[l1][l2];
    }
    public int min( int ... num){
        int min= Integer.MAX_VALUE;
        for(int i =0; i<num.length; i++){
            if(num[i]<min)
                min = num[i];
        }
        return min;
    }
}


//recursion
public class Solution {
    public int minDistance(String word1, String word2) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(word1.length()==0) return word2.length();
        if(word2.length()==0) return word1.length();
        if(word1.charAt(0) == word2.charAt(0))
            return minDistance(word1.substring(1), word2.substring(1));
        else{
            return 1 + Math.min( minDistance(word1.substring(1), word2.substring(1)),
            Math.min(minDistance(word1, word2.substring(1)), minDistance(word1.substring(1), word2)));
        }
    }
}