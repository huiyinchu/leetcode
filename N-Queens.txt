public class Solution {
     public ArrayList<String[]> solveNQueens(int n) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<String[]> res = new ArrayList<String[]>();
        char[][] board= new char[n][n];
        for(int i = 0;i<n;i++)
            for(int j = 0;j<n;j++)
                board[i][j] = '.';
        dfs(0,0,0,board,res);
        return res;
    }
    public void dfs(int i, int j, int count, char[][]board, ArrayList<String[]> res){
        if(i>board.length || j>board.length) return;
        if(count == board.length){
            String[] sol = new String[count];
            for(int s=0;s<count;s++)
                sol[s] = new String(board[s]);
            res.add(sol);
            return;
        }
        for(int row = 0;row<board.length;row++){
            if(valid(row,j,board)){
                board[row][j]='Q';
                dfs(row,j+1,count+1,board,res);
                board[row][j]='.';
           } 
        }
    }
    public boolean valid(int row, int col,char[][]board){
        for(int i =0;i<board.length;i++)
            if(board[row][i]=='Q' || board[i][col]=='Q')return false;
        for(int i =row, j=col;i>=0 && j>=0;i--,j--)
            if(board[i][j]=='Q')return false;
        for(int i =row, j=col;i<board.length && j>=0;i++,j--)
            if(board[i][j]=='Q')return false;
        return true;
    }
}




//nQueen II return the total number of distinct solutions.
public class Solution {
    static int num;
    public int totalNQueens(int n) {
        // Start typing your Java solution below
        // DO NOT write main() function
        num=0;
        char[][] board= new char[n][n];
        for(int i = 0;i<n;i++)
            for(int j = 0;j<n;j++)
                board[i][j] = '.';
        dfs(0,0,0,board);
        return num ;
    }
    public void dfs(int i, int j, int count, char[][]board){
        if(i>board.length || j>board.length) return;
        if(count == board.length){
            num++;
            return;
        }
        for(int row = 0;row<board.length;row++){
            if(valid(row,j,board)){
                board[row][j]='Q';
                dfs(row,j+1,count+1,board);
                board[row][j]='.';
           }
        }
    }
    public boolean valid(int row, int col,char[][]board){
        for(int i =0;i<board.length;i++)
            if(board[row][i]=='Q' || board[i][col]=='Q')return false;
        for(int i =row, j=col;i>=0 && j>=0;i--,j--)
            if(board[i][j]=='Q')return false;
        for(int i =row, j=col;i<board.length && j>=0;i++,j--)
            if(board[i][j]=='Q')return false;
        return true;
    }
}