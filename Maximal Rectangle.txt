public class Solution {
    public int maximalRectangle(char[][] matrix) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(matrix.length==0) return 0;
        int[][] dp=new int[matrix.length][matrix[0].length];
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]=='1'){
                    if(i==0) dp[i][j]=1;
                    else dp[i][j]=dp[i-1][j]+1;
                }
                else dp[i][j]=0;
            }
        }
        int max=0;
        for(int i=0;i<matrix.length;i++){
            max=Math.max(max,largestRectangleArea(dp[i]));
        }
        return max;
    }
    
    public int largestRectangleArea(int[] height) {
        // Start typing your Java solution below
        // DO NOT write main() function
        Stack<Integer> stack = new Stack<Integer>();
        int i =0, max = 0;
        while(i < height.length){ 
            if(stack.isEmpty() || height[stack.peek()]<=height[i])
                stack.push(i++);
            else
                max = Math.max(max, height[stack.pop()]* (stack.isEmpty()? i : i-stack.peek()-1));   
        }
        while(!stack.isEmpty())
            max = Math.max(max, height[stack.pop()]* (stack.isEmpty()? i : i-stack.peek()-1));
        return max;
    }


}