/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<Integer> ans=new ArrayList<Integer>();
        if(root==null) return ans;
        dfs(root,ans);
        return ans;
    }
    
    public void dfs(TreeNode root, ArrayList<Integer> ans){
        if(root==null) return;
        dfs(root.left,ans);
        ans.add(root.val);
        dfs(root.right,ans);
    }
}


public class Solution {
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<Integer> ans=new ArrayList<Integer>();
        if(root==null) return ans;
        Stack<TreeNode> stack=new Stack<TreeNode>();
        while(stack.size()>0||root!=null){
            if(root!=null){
                stack.push(root);
                root=root.left;
            }
            else{
                TreeNode t=stack.pop();
                ans.add(t.val);
                root=t.right;
            }
        }
        return ans;
    }
}