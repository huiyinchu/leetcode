public class Solution {
    public void nextPermutation(int[] num) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int i =num.length -2, j;
        while(i>=0 && num[i]>=num[i+1])
            --i;
        if(i<0){
            reverse(num, 0);
            return;
        } 
        j = num.length-1;
        while( num[j]<=num[i]) --j;
        swap(num, i++ , j);
        reverse(num, i);
    }
    public void reverse(int []num, int i){
        for (int j = num.length - 1; j > i; i++, j--) 
            swap(num, i, j);
    }
    public void swap(int []num, int a, int b){
        num[a] = num[a]^num[b]; //xor, sum of both;
        num[b] = num[a]^num[b]; //xor, a is 0 out;
        num[a] = num[a]^num[b]; //xor, b is 0 out;
    }
}


public String getPermutation(int n, int k) {
       // Start typing your Java solution below
       // DO NOT write main() function
       boolean[] output = new boolean[n];
       StringBuilder buf = new StringBuilder("");
       int[] res = new int[n];
       res[0]=1;
       for(int i=1;i<n;i++)
           res[i]=res[i-1]*i;
       
       for(int i=n-1;i>=0;i--){
           int s=1;
           while(k>res[i]){
               s++;
               k-=res[i];
           }
           for(int j=0;j<n;j++){
               if(j+1<=s && output[j]){
                   s++;
               }
           }
           output[s-1]=true;
           buf.append(Integer.toString(s));
       }        
       return buf.toString();
   }